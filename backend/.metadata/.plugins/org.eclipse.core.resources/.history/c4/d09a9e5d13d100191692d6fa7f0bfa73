package com.njh.app.nbacontracts;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.stream.Stream;

import org.jsoup.select.Elements;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.njh.app.nbacontracts.data.PlayerContractData;
import com.njh.app.nbacontracts.data.TeamData;
import com.njh.app.nbacontracts.model.PlayerContract;
import com.njh.app.nbacontracts.model.Team;
import com.njh.app.nbacontracts.model.TeamRepository;

@Component
class Initializer implements CommandLineRunner {
	
	private final TeamRepository repository;
	
	public Initializer(TeamRepository repository) {
		this.repository = repository;
	}
	
	 @Override
	 public void run(String... strings) throws IOException {
		 TeamData teamData = new TeamData();
		 Elements teams = teamData.getTeamData();
		 ArrayList<Team> teamList = new ArrayList<>();
		 
		 teams.forEach(team -> {
			 String teamName = team.attr("title");
			 String accronym = team.text();
			 String link = team.attr("href");
			 Team nbaTeam = new Team(teamName, accronym, link);
			 repository.save(nbaTeam);
			 teamList.add(nbaTeam);
//			 repository.save(new Team(teamName, accronym, link));
		 });

		 PlayerContractData playerContracts = new PlayerContractData();
		 Elements data = playerContracts.getPlayerContractData();
		 
		 ArrayList<HashMap<String, String>> playerList = playerContracts.getContractValues(data);
		 

		 playerList.forEach(player -> {
			 HashMap<String, String> d = new HashMap<>();
			 
			 String playerName = player.get("playerName");
			 String link = player.get("link");
			 String teamAccr = player.get("teamAccr");
			 String y2019 = player.get("2019-2020");
			 String y2020 = player.get("2020-2021");
			 String y2021 = player.get("2021-2022");
			 String y2022 = player.get("2022-2023");
			 String y2023 = player.get("2023-2024");
			 String y2024 = player.get("2024-2025");
			 String gtd = player.get("guaranteed");
			 d.put("2019-2020", y2019);
			 d.put("2020-2021", y2020);
			 d.put("2021-2022", y2021);
			 d.put("2022-2023", y2022);
			 d.put("2023-2024", y2023);
			 d.put("2024-2025", y2024);
			 
//			 PlayerContract plyr = new PlayerContract(playerName, link, teamAccr, d, gtd);
			 
			 PlayerContract p = PlayerContract.builder().name(playerName)
					 .link(link)
					 .teamAccr(teamAccr)
					 .contractStr(d)
					 .guaranteedStr(gtd)
					 .build();
			 
			 System.out.println(   "PLAYER: " + p);
			 System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++");
//			 for ( Team t : teamList ) {
//				 if(p.getTeamAccr().equals(t.getAccronym())) {
////					 System.out.println("  TEAM ACCR |" + t.getAccronym() + "|   PLAYER |" + p.getName() + "|");
//					 t.getPlayerContracts().add(p);
//					 repository.save(t);
//				 }
//			 }
		 });
		 
		 
//		 System.out.println("ARRAY OF TEAMS:");
//		 System.out.println(teamList);
//		 System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++");
		 
		 System.out.println("    PLAYER COUNT: " + PlayerContract.playerCount);
		 System.out.println("    TEAM COUNT: " + teamList.size());
		 
		 ///////////////////////////////////////////////////	 
		 // ADDS AN `Event` INSTANCE TO A `Group` ITEM, DENVER?
//		 Group djug = repository.findByName("Denver JUG");
//		 Event e = Event.builder().title("Full Stack Reactive")
//				 .description("Reactive with Spring Boot + React")
//				 .date(Instant.parse("2018-12-12T18:00:00.000Z"))
//				 .build();
//		 djug.setEvents(Collections.singleton(e));
//		 repository.save(djug);

		 repository.findAll().forEach(System.out::println);
	 }

}



///////////////////////////////////////////////////
// SAVES `Group` DATA? ////////////////////////////
//Stream.of("Denver JUG", "Utah JUG", "Seattle JUG",
//		 "Richmond JUG").forEach(name ->
//		 repository.save(new Group(name))
//				 );

// ADDS AN `Event` INSTANCE TO A `Group` ITEM, DENVER?
//Group djug = repository.findByName("Denver JUG");
//Event e = Event.builder().title("Full Stack Reactive")
//		 .description("Reactive with Spring Boot + React")
//		 .date(Instant.parse("2018-12-12T18:00:00.000Z"))
//		 .build();
//djug.setEvents(Collections.singleton(e));
//repository.save(djug);
